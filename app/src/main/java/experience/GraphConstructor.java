
package experience;

import java.io.File;
import java.io.IOException;
import java.util.List;
import com.github.sh0nk.matplotlib4j.Plot;
import com.github.sh0nk.matplotlib4j.PythonExecutionException;
import com.github.sh0nk.matplotlib4j.builder.ScaleBuilder;

import model.Generator;

/**
 * The GraphConstructor class is responsible for creating and displaying graphs using the matplotlib4j library.
 * It allows adding plots to the graph and generating the final plot with specified labels and title.
 * The generated plot can be saved as a PNG file in the specified folder.
 */
public class GraphConstructor {

    /**
     * The label for the x-axis of the graph.
     */
    private String xLabel;

    /**
     * The folder path where the generated plot will be saved.
     */
    private String folderPath = "./Resultats";

    /**
     * The label for the y-axis of the graph.
     */
    private String yLabel;

    /**
     * The Plot object used for creating and displaying the graph.
     */
    private Plot plt;

    /**
     * Name of the folder where the plot will be saved.
     */

    private String generatorName;

    /**
     * Size of the data generated by the generator.
     */

    private int size;


    /**
     * Constructor that initializes the graph with specified x and y labels.
     *
     * @param xLabel The label for the x-axis.
     * @param yLabel The label for the y-axis.
     */
    public GraphConstructor(String generatorName, int size, String xLabel, String yLabel) {
        this.generatorName = generatorName;
        this.size = size;
        createFolder();
        this.xLabel = xLabel;
        this.yLabel = yLabel;
        this.plt = Plot.create();
    }

    /**
     * Creates the folder where the plot will be saved.
     */
    private void createFolder() {
        File folder = new File(this.folderPath + File.separator + this.generatorName + File.separator + this.size);
        if (!folder.exists()) {
            folder.mkdirs();
        }
    }

    /**
     * Adds a plot to the graph with the specified x and y data and label.
     *
     * @param x     The data for the x-axis.
     * @param y     The data for the y-axis.
     * @param label The label for the plot.
     */
    public void addPlot(List<Number> x, List<Number> y, String label) {
        plt.plot().add(x, y, "o--").label(label);
    }

    /**
     * Generates and displays the plot with the specified labels and title.
     * The plot is saved as a PNG file in the specified folder.
     */
    public void generatePlot() {
        plt.xlabel(xLabel);
        plt.ylabel(yLabel);
        plt.legend().loc("upper left");
        plt.title(this.generatorName + " Size " + this.size);
        plt.yscale(ScaleBuilder.Scale.log);

        String saveFile = this.folderPath + File.separator + this.generatorName + File.separator + this.size + File.separator + yLabel + "_en_fonction_de_" + xLabel + ".png";
        saveFile = saveFile.replace("\\", "/");
        plt.savefig(saveFile).dpi(200);
        try {
            plt.executeSilently();
        } catch (IOException | PythonExecutionException e) {
            System.out.println("Erreur lors de la construction du graphe : " + e.getMessage());
        }
    }

    /**
     * Gets the label for the x-axis.
     *
     * @return The label for the x-axis.
     */
    public String getxLabel() {
        return xLabel;
    }

    /**
     * Sets the label for the x-axis.
     *
     * @param xLabel The new label for the x-axis.
     */
    public void setxLabel(String xLabel) {
        this.xLabel = xLabel;
    }

    /**
     * Gets the label for the y-axis.
     *
     * @return The label for the y-axis.
     */
    public String getyLabel() {
        return yLabel;
    }

    /**
     * Sets the label for the y-axis.
     *
     * @param yLabel The new label for the y-axis.
     */
    public void setyLabel(String yLabel) {
        this.yLabel = yLabel;
    }
}
